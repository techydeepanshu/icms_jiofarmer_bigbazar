{"version":3,"sources":["components/SaveInvoiceData/SaveInvoiceData.js"],"names":["useStyles","makeStyles","root","width","paddingTop","container","maxHeight","marginTop","table","fontWeight","fontSize","backgroundColor","cursor","emptyColumnList","SaveInvoiceData","tesseractService","TesseractService","classes","useState","date","setDate","invoice","setInvoice","dropdownLabel","dropdownOptions","length","inv","setInv","num","setNum","day","setDay","setHicksvilleData","Api","tableData","setTableData","emptyColumn","setEmptyColumn","productDetails","setProductDetails","pushToInventory","setPushToInventory","inventoryData","setInventoryData","itemNoDropdown","setItemNoDropdown","loader","setLoader","reviewItems","showPosIndex","setShowPosIndex","inventoryService","InventoryService","showModal","setShowModal","stateUpdated","setStateUpdated","setCostInc","setCostDec","unitCost","setUnitCost","setIsUpdated","setUpdateIndex","posProducts","wooComProducts","singleItemData","notFounds","setNotFounds","unitsInCase","setUnitsInCase","price","setPrice","setRedState","updateSku","options","setOptions","detailsModal","setDetailsModal","invoiceOptions","setInvoiceOptions","details","setDetails","detailsIndex","setDetailsIndex","userEmail","setUserEmail","todayDate","setTodayDate","openInvoice","setOpenInvoice","setFetchingOptions","invoiceHeader","header","item","quantity","description","pos","barcode","posSku","size","department","unitPrice","showPosState","setShowPosState","getProducts","a","console","log","Promise","all","map","row","GetProductDetails","res","id","name","regular_price","sku","slug","stock_quantity","sale_price","itemNo","items","getPosProducts","hasErrorOccured","GetPOSProductDetails","Array","isArray","alert","SKU","UPC","ITEMNAME","TOTALQTY","DEPNAME","COST","cp","PRICE","sp","parseInt","qty","pieces","isNew","BUYASCASE","CASEUNITS","toString","CASECOST","pushToWoocom","products","product","UpdateProductDetails","pushToPOS","UpdatePOSProducts","JSON","stringify","DESCRIPTION","QTY","SIZE","PACK","REPLACEQTY","DEPARTMENT","CATEGORY","SUBCATEGORY","ISFOODSTAMP","ISWEIGHTED","ISTAXABLE","ISNEWITEM","COMPANYNAME","PRODUCTCODE","data","Cost","ItemName","Price","TotalQty","CreateDBProduct","response","UpdateDBProduct","count","pushInventoryDetails2","element","markup","duplicates","i","hasOwnProperty","push","lastIndexOf","tempData","Object","values","filter","ele","forEach","index","temp","val","updatedWoocomProducts","wooIndex","findIndex","wooProduct","window","pushSingleItemToInventory","notFoundItems","tempTable","isUpdated","includes","show","rowData","Item","Description","Quantity","Barcode","PosSKU","InvoiceName","CreateNotFoundItems","error","priceIncreasedProducts","priceIncrease","invoiceName","itemName","value","UpdateProductFields","undefined","UpdateInvoiceData","data1","cost","UpdateDBafterPosUpdate","setProductsInTable","saveDetails","toggleModal","getInvoices","getSavedInvoices","reverseUpdate","result","ok","reversePOSUpdate","linkingCorrect","statusText","linkManually","logState","PosName","posName","ItemCode","LinkingDate","PersonName","Size","UnitCost","UnitPrice","sellingPrice","InvoiceNo","InvoiceDate","Department","CostIncrease","CostDecrease","CostSame","linkManuallyLog","logResult","fetchSavedData","no","GetSavedInvoiceData","InvoiceData","then","ocrData","invoiceData","obj","newObj","key","toUpperCase","convertToUpperCase","trim","POS","isReviewed","SellerCost","SellingPrice","Details","LinkingCorrect","parseFloat","toFixed","extendedPrice","keys","catch","err","x","hicksvilleDropdownNew","event","isNaN","getHicksvilleData","productsString","split","newData","s","upc","altupc1","altupc2","vintage","totalQty","pricea","priceb","pricec","salePrice","pack","label","updateItem","props","ocrCost","Error","finally","costChange","b","c","generateLog","addRow","tempTableData","showPOS","setProductsInTableNew","SavedDate","SavedInvoiceNo","pushInventoryDetails","mergeDuplicates","handleChange","indexOf","splice","arr","Map","has","get","set","newArr","useEffect","curDate","Date","getFullYear","getMonth","getDate","firebase","auth","onAuthStateChanged","user","email","className","style","display","onChange","newValue","getOptionLabel","option","autoHighlight","renderInput","params","variant","type","marginLeft","InputLabelProps","shrink","target","border","color","padding","textAlign","textDecoration","align","onClick","newInventoryData","goBack","rows","isEmpty","Set","isFree","styles","red","free","opacity","tooltip","e","aria-label","tooltipIsReviewed","disabled","loading","onInputChange","setTimeout","newState","filterOptions","state","text","confirm","deleteRow","position","top","background","divRow","location","reload","renderTableData","invoiceList","margin","renderInvoiceTable","onClose","closeButton","fluid","sm","htmlFor","placeholder","height"],"mappings":"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","file":"static/js/14.6e36e23a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { dropdownOptions } from \"../../utils/invoiceList\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Box, Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TesseractService } from \"../../services/TesseractService\";\n\nimport { InventoryService } from \"../../services/InventoryService\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { Api } from \"../../services/Api\";\nimport HicksData from \"../DisplayData/Hicksville.json\";\nimport { CContainer, CModalHeader, CCol, CFormGroup, CInput, CButton, CLabel, CModal, CModalBody, CModalFooter, CRow } from \"@coreui/react\";\nimport Button from \"../../UI/Button\";\nimport styles from \"../DisplayData/DisplayData.module.css\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport UpdateInventory from \"../Update/UpdateInventory\";\nimport Spinner from \"../../UI/Spinner/Spinner\";\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\n\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport Cancel from \"@material-ui/icons/Cancel\";\n// import CircularProgress from '@material/circular-progress';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loading from 'react-loader-spinner';\n\n\nconst useStyles = makeStyles({\n        root: {\n        width: \"100%\",\n        paddingTop: 50,\n        },\n        container: {\n            maxHeight: \"80vh\",\n            marginTop: 10,\n          },\n          table: {\n            \"& thead th\": {\n              fontWeight: \"600\",\n              fontSize: 20,\n              backgroundColor: \"grey\",\n            },\n            \"& tbody td\": {\n              fontWeight: \"300\",\n            },\n            \"& tbody tr:hover\": {\n              backgroundColor: \"#fffbf2\",\n              cursor: \"pointer\",\n            },\n          },\n    });\nlet emptyColumnList = [];\n\nconst SaveInvoiceData = () => {\n\n    const tesseractService = new TesseractService();\n    const classes = useStyles();\n    const [date, setDate] = useState(\"\");\n    const [invoice, setInvoice] = useState({});\n    const [invoiceNo, setInvoiceNo] = useState(\"\");\n    const numOfCollections = dropdownOptions.length;\n    const dropdownLabel = \"Select Invoice(\"+   numOfCollections   + \")\";\n    const [inv, setInv] = useState(\"\");\n    const [ num, setNum] = useState(\"\");\n    const [day, setDay] = useState(\"\");\n\n    \n\n    //Following for display data functionalities.\n    const [hicksvilleData, setHicksvilleData] = useState([]);\n    let saveInvoiceFlag  = 1;\n    const api = new Api();\n    const [tableData, setTableData] = useState([]);\n    const [emptyColumn, setEmptyColumn] = useState([]);\n    const [productDetails, setProductDetails] = useState([]);\n    const [pushToInventory, setPushToInventory] = useState(false);\n    const [inventoryData, setInventoryData] = useState([]);\n    const [itemNoDropdown, setItemNoDropdown] = useState([]);\n    const [loader, setLoader] = useState(false);\n    const [reviewItems, setReviewItems] = useState([]);\n    const [showPosIndex, setShowPosIndex] = useState(-1);\n    const inventoryService = new InventoryService();\n    const [showModal, setShowModal] = useState(false);\n    const [stateUpdated, setStateUpdated] = useState(\"false\");\n    const [costInc, setCostInc] = useState(\"false\");\n    const [costDec, setCostDec] = useState(\"false\");\n    const [unitCost, setUnitCost] = useState(\"\");\n    const [isUpdated, setIsUpdated] = useState(\"false\");\n    const [updateIndex, setUpdateIndex] = useState(-1);\n    let posProducts = []\n    let wooComProducts = [];\n    let singleItemData = [];\n    let itemNo = \"\";\n    // const [posProducts, setPosProducts] = useState([]);\n\n    const [notFounds, setNotFounds] = useState(\"false\");\n    const [unitsInCase, setUnitsInCase] = useState(\"\");\n    const [price, setPrice] = useState(\"\");\n    const [redState, setRedState] = useState(\"true\");\n    let updateSku = \"\";\n    const [searchVal, setSearchVal] = useState(\"\");\n    const [options, setOptions] = useState([]);\n    const [detailsModal, setDetailsModal] = useState(false);\n    const [invoiceOptions, setInvoiceOptions] = useState([]);\n    const [details, setDetails] = useState(\"\");\n    const [detailsIndex, setDetailsIndex] = useState(-1);\n    const [userEmail, setUserEmail] = useState(\"\");\n    const [todayDate, setTodayDate] = useState(\"\");\n    const [openInvoice, setOpenInvoice] = useState(false);\n    const [dropdownLoader, setDropdownLoader] = useState(false);\n    const [fetchingOptions, setFetchingOptions] = useState(false);\n    const [dropdownIndex, setDropwdownIndex] = useState(-1);\n\n    const invoiceHeader = [\n      \"Sr.No.\",\n      \"Invoice\",\n      \"Invoice No.\",\n      \"Invoice Date\",\n      \"Open Invoice\"\n    ]\n\n    \n    const header = [\n        \"Serial No.\",\n        \"Add Details\",\n        \"Barcode\",\n        \"POS SKU\",\n        \"Qty Shipped\",\n        \"ITEM NO\",\n        \"Link Product\",\n        \n        \"DESCRIPTION\",\n        \"Units in  Case\",\n        \"Case cost\",\n        \"Extended Price\",\n       \n        \"Unit Cost \",\n        \"Unit Price\",\n        \"Mark up (%)\",\n        \"Tick to Delete\",\n        \"Update POS\",\n        \"Reverse POS Update\",\n        \"NO LINKING\",\n        \"Serial No.(2)\"\n    ];\n\n    const [showPosState, setShowPosState] = useState({\n        item: \"\",\n        quantity: \"\",\n        description: \"\",\n        price: \"\",\n        pos: \"\",\n        barcode: \"\",\n        posSku: \"\",\n        invoice: \"\",\n        size: \"\",\n        department: \"\",\n        unitCost: \"\",\n        unitPrice: \"\",\n    });\n\n//***************  INDIVIDUAL ITEM UPDATE FUNCTIONALITY STARTS*******************************************.\n\n    //Function to fetch wooCom Prpducts.\n    async function getProducts() {\n      console.log(\"IN WOOCOM PRODUCTS\");\n      const items = await Promise.all(\n        singleItemData.map(async (row) => {\n          console.log(row.barcode);\n          try {\n            const res = await inventoryService.GetProductDetails(row.barcode);\n            console.log(res);\n            const {\n              id,\n              name,\n              regular_price,\n              price,\n              sku,\n              slug,\n              stock_quantity,\n              sale_price,\n            } = res[0];\n            return {\n              id,\n              name,\n              regular_price,\n              price,\n              sku,\n              slug,\n              stock_quantity,\n              sale_price,\n              itemNo: row.itemNo,\n            };\n          } catch (error) {\n            // tempNotFoundProducts.push(row);\n            console.log(\"Couldn't fetch product from woodpress.\", row.itemNo);\n            return null;\n          }\n        })\n      );\n      setLoader(false);\n      console.log(items);\n      wooComProducts = items;\n      // setWooComProducts(items.filter((ele) => ele !== null));\n      // setNotFoundProducts(tempNotFoundProducts);\n    }\n\n    //function to fetch POS products.\n    async function getPosProducts() {\n      console.log(\"IN POS PRODUCTS\");\n      setLoader(true);\n      let hasErrorOccured = false;\n      const items = await Promise.all(\n        singleItemData\n          .map(async (row) => {\n            console.log(row.barcode);\n            try {\n              const res = await inventoryService.GetPOSProductDetails(\n                row.barcode\n              );\n              console.log(res);\n              if(!Array.isArray(res)){\n                alert(\"API not working\");\n                return;\n              }\n              console.log(\"fetched pos data\", res);\n              const { SKU, UPC, ITEMNAME, TOTALQTY, DEPNAME } = res[0];\n              console.log(SKU);\n              console.log(updateSku);\n              if(SKU == updateSku){\n                console.log(SKU);\n                console.log(updateSku);\n                return {\n                  ...row,\n                  COST: row.cp,\n                  PRICE: row.sp,\n                  SKU,\n                  UPC,\n                  ITEMNAME,\n                  TOTALQTY:\n                    parseInt(row.qty) * parseInt(row.pieces) + parseInt(TOTALQTY),\n                  itemNo: row.itemNo,\n                  isNew: false,\n                  BUYASCASE: 1,\n                  CASEUNITS: row.pieces.toString(),\n                  CASECOST: row.unitPrice.toString(),\n                  DEPNAME,\n                };\n              } else {\n                alert(\"SKU mismatch!!\");\n              }\n\n              \n              \n            } catch (error) {\n              hasErrorOccured = true;\n              return {\n                ...row,\n                COST: row.cp,\n                PRICE: row.sp,\n                SKU: row.posSku,\n                UPC: row.barcode,\n                ITEMNAME: row.description,\n                TOTALQTY: parseInt(row.qty) * parseInt(row.pieces),\n                itemNo: row.itemNo,\n                isNew: true,\n                BUYASCASE: 1,\n                CASEUNITS: row.pieces.toString(),\n                CASECOST: row.unitPrice.toString(),\n                DEPNAME: \"\",\n              };\n            }\n          })\n      );\n      if (hasErrorOccured) {\n        alert(\"Couldn't fetch some data from POS\");\n      }\n      setLoader(false);\n      console.log(items);\n      posProducts = items;\n      console.log(posProducts);\n      // setPosProducts(items.filter((ele) => ele !== null));\n    }\n\n    //PUSH TO WOOCOM.\n    const pushToWoocom = async (products) => {\n      setLoader(true);\n      const responses = await Promise.all(\n        products.map(async (product) => {\n          try {\n            const res = await inventoryService.UpdateProductDetails(product.id, {\n              regular_price: product.regular_price,\n              stock_quantity: product.stock_quantity,\n            });\n            const { id, name, regular_price, stock_quantity } = res;\n            return {\n              id,\n              name,\n              regular_price,\n              stock_quantity,\n              itemNo: product.itemNo,\n            };\n          } catch (error) {\n            console.log(error);\n            alert(\"Couldn't update product on website.\");\n            return null;\n          }\n        })\n      );\n      setLoader(false);\n    };\n\n     //PUSH TO POS.\n     const pushToPOS = async (products) => {\n      setLoader(true);\n      console.log(products);\n      const responses = await Promise.all(\n        products.map(async (product) => {\n          try {\n            const {\n              COST,\n              PRICE,\n              UPC,\n              TOTALQTY,\n              isNew,\n              ITEMNAME,\n              BUYASCASE,\n              CASEUNITS,\n              CASECOST,\n              SKU,\n              DEPNAME,\n              itemNo\n            } = product;\n            const res = await inventoryService.UpdatePOSProducts(\n              JSON.stringify({\n                UPC,\n                ITEMNAME,\n                DESCRIPTION: \"\",\n                PRICE,\n                COST,\n                QTY: TOTALQTY,\n                SIZE: \"\",\n                PACK: \"\",\n                REPLACEQTY: 1,\n                DEPARTMENT: DEPNAME,\n                CATEGORY: \"\",\n                SUBCATEGORY: \"\",\n                ISFOODSTAMP: 1,\n                ISWEIGHTED: 0,\n                ISTAXABLE: 1,\n                // VENDORNAME: invoice.slug,\n                // VENDORCODE: itemNo,\n                // VENDORCOST: \"\",\n                ISNEWITEM: isNew ? 1 : 0,\n                BUYASCASE,\n                CASEUNITS,\n                CASECOST,\n                COMPANYNAME: invoice.slug,\n                PRODUCTCODE: itemNo,\n              })\n            );\n            console.log(\"updated pos data\", res);\n            const data = {\n              UPC,\n              SKU,\n              Cost: COST,\n              ItemName: ITEMNAME,\n              Price: PRICE,\n              TotalQty: TOTALQTY,\n            };\n            //not needed as of now, parikshit.\n            if (isNew) {\n              const response = await inventoryService.CreateDBProduct(data);\n              console.log(\"Created new product\", response);\n            } else {\n              const response = await inventoryService.UpdateDBProduct({\n                count: parseInt(product.qty) * parseInt(product.pieces),\n                UPC,\n              });\n              console.log(\"updated existing product\", response);\n            }\n  \n            console.log(\"res from POS\", res);\n            return true;\n          } catch (error) {\n            console.log(error);\n            return null;\n          }\n        })\n      );\n      setLoader(false);\n    };\n\n    const pushInventoryDetails2 = async () => {\n      console.log(posProducts);\n      setLoader(true);\n      let data = singleItemData.map((element) => {\n        return {\n          item: element.itemNo,\n          qty: parseInt(element.qty) * parseInt(element.pieces),\n          cp: element.unitPrice,\n          markup: element.markup,\n          sp: element.sp,\n          description: element.description,\n        };\n      });\n  \n      var duplicates = {};\n      for (var i = 0; i < data.length; i++) {\n        if (duplicates.hasOwnProperty(data[i].item)) {\n          duplicates[data[i].item].push(i);\n        } else if (data.lastIndexOf(data[i].item) !== i) {\n          duplicates[data[i].item] = [i];\n        }\n      }\n  \n      let tempData = Object.values(duplicates).filter((ele) => ele.length > 1);\n      if (tempData.length > 0) {\n        tempData.forEach((index) => {\n          let temp = 0;\n          index.forEach((val) => {\n            if (data[val]) {\n              // console.log(\"data[val]\", data[val]);\n              temp += data[val].qty;\n              if (temp - data[val].qty !== 0) {\n                data[val] = null;\n              }\n            }\n          });\n          data[index[0]].qty = temp;\n        });\n      }\n      data = data.filter((ele) => ele !== null);\n  \n      /**\n       * add the fileds of  data from the woocom & ocr\n      */\n     console.log(wooComProducts.length);\n      if(wooComProducts[0] != null){\n        let updatedWoocomProducts = data\n          .map((product, index) => {\n            /**find index of the item in fetched woocom product list */\n            const wooIndex = wooComProducts.findIndex(\n              (wooProduct) => product.item === wooProduct.itemNo\n            );\n            if (wooIndex !== -1) {\n              /**get the qty & other fileds of the woocom product */\n              let { id, stock_quantity } = wooComProducts[wooIndex];\n              stock_quantity += product.qty;\n              const regular_price = product.sp;\n              return { id, regular_price, stock_quantity, itemNo: product.item };\n            }\n            return null;\n          })\n          .filter((item) => item !== null);\n\n        console.log(updatedWoocomProducts); \n        await pushToWoocom(updatedWoocomProducts);\n        }\n      await pushToPOS(posProducts);\n  \n      setLoader(false);\n      // if (itemsNotPushed.length === 0) {\n      window.alert(\"Inventory updated successfully\");\n      // setRedirect(true);\n      // } else {\n      //   window.alert(\"Inventory not updated\");\n      // }\n    };\n\n    function toConsoleState() {\n      console.log(wooComProducts);\n      console.log(posProducts);\n      console.log(singleItemData);\n    }\n\n  const pushSingleItemToInventory = async (index) =>{\n    console.log(index);\t\n    setShowPosIndex(-1);\n    \n    \n    console.log(tableData);\n    const product = [];\n    const notFoundItems = emptyColumn.map((i) => tableData[i]);\n    const tempTable = [];\n    product.push(tableData[index]);\n    console.log(product);\n    product.isUpdated = \"true\";\n    itemNo = product.itemNo;\n    \n    product.forEach((element, index) => {\n      if (\n        !emptyColumn.includes(index) &&\n        element.show === true &&\n        element[\"isForReview\"] != true\n      ) {\n        let rowData = { index: index + 1, ...element };\n        tempTable.push(rowData);\n      }\n    });\n    // console.log(\"notFoundItems\", notFoundItems);\n    console.log(tempTable);\n\n    if (emptyColumn.length !== 0) {\n      /**api to push  to not found list*/\n      setLoader(true);\n      const responses = await Promise.all(\n        notFoundItems.map(async (product) => {\n          try {\n            const data = {\n              Item: product.itemNo,\n              Description: product.description,\n              Quantity: product.qty,\n              Price: product.unitPrice,\n              sku: product.sku,\n              Barcode: product.barcode,\n              PosSKU: product.posSku,\n              InvoiceName: invoice.slug,\n            };\n            await inventoryService.CreateNotFoundItems(data);\n            return true;\n          } catch (error) {\n            console.log(\n              \"Couldn't create not found product\",\n              product.description,\n              { error }\n            );\n            alert(\"Couldn't create product on website.\");\n            return null;\n          }\n        })\n      );\n      setLoader(false);\n    }\n    const priceIncreasedProducts = tempTable.filter(\n      (product) => product.priceIncrease !== 0\n    );\n    setLoader(true);\n    const res = await Promise.all(\n      priceIncreasedProducts.map(async (product) => {\n        try {\n          const data = {\n            invoiceName: invoice.slug,\n            itemName: product.itemNo,\n            value: { Price: product.unitPrice },\n          };\n          console.log(data)\n          await inventoryService.UpdateProductFields(data);\n          \n          \n        } catch (error) {\n          console.log(`couldn't update price for product ${product.itemNo}`);\n        }\n      })\n    );\n    setLoader(false);\n    // console.log(tempTable);\n    tempTable[0].isUpdated = \"true\";\n    singleItemData = tempTable;\n    // setPushToInventory(true);\n    console.log(singleItemData);\n    \n    updateSku = singleItemData[0].posSku;\n\n\n    await getProducts();\n    await getPosProducts();\n    console.log(posProducts);\n    if(posProducts[0] != undefined ){\n      await pushInventoryDetails2();\n      toConsoleState();\n      setIsUpdated(\"true\");\n      setUpdateIndex(index);\n      console.log(singleItemData);\n      console.log(singleItemData.itemNo);\n      await inventoryService.UpdateInvoiceData(inv, num, day, singleItemData[0].itemNo); \n\n      //Update unit cost n price in db, after update POS.\n      let data1 = {\n        cost: singleItemData[0].cp,\n        price: singleItemData[0].sp,\n        item: singleItemData[0].itemNo,\n        invoice: invoice.slug\n      }\n      console.log(data1)\n      await inventoryService.UpdateDBafterPosUpdate(data1);\n      setProductsInTable();\n    } else {\n      alert(\"POS not updated!!\");\n      setProductsInTable();\n    }\n\n    \n    \n  }\n//***************************INDIVIDUAL ITEM UPDATE FUNCTIONALITY ENDS*****************************************.\n\n  const saveDetails = async () => {\n    console.log(detailsIndex);\n    console.log(details);\n    const item = tableData[detailsIndex];\n    console.log(item);\n    const data = {\n      invoice: invoice.slug,\n      itemNo: item.itemNo,\n      details: details\n    }\n    const res = await inventoryService.saveDetails(data);\n    console.log(res);\n    if(res === \"s\"){\n      alert(\"Details added successfully\");\n      setDetails(\"\");\n      setDetailsIndex(-1);\n      toggleModal(\"details\");\n      setProductsInTable();\n    }else {\n      alert(\"Some error Occured.\");\n      setDetailsIndex(-1);\n      setDetails(\"\");\n      toggleModal(\"details\");\n    }\n\n  }\n\n  const getInvoices = async () => {\n    setOpenInvoice(false);\n    console.log(invoice);\n    const res = await inventoryService.getSavedInvoices(invoice);\n    console.log(res);\n    // let array = [];\n    // res.map(item => {\n    //   array.push(item.SavedInvoiceNo);\n    // })\n    console.log(res);\n    setInvoiceOptions(res);\n\n  }\n\n    const reverseUpdate = async(index) => {\n      console.log(index);\n      console.log(tableData);\n      console.log(tableData[index]);\n      let item = tableData[index];\n      let data = {\n        invoice: invoice.slug,\n        itemNo: item.itemNo,\n      }\n      const result = await inventoryService.reverseUpdate(data);\n      console.log(result);\n      if(result.ok == 1){\n        setProductsInTable();\n      }else {\n        alert(\"Some error occured in updation\");\n      }\n    }\n    \n\n    const reversePOSUpdate = async(index) => {\n      console.log(index);\n      console.log(tableData);\n      console.log(tableData[index]);\n      let item = tableData[index];\n      const result = await inventoryService.reversePOSUpdate(inv, num, day, item.itemNo);\n      if(result.ok == 1){\n        setProductsInTable();\n      }else {\n        alert(\"Some error occured in updation\");\n      }\n\n    }\n\n    const linkingCorrect = async (index) => {\n      console.log(index);\n      console.log(tableData);\n      console.log(tableData[index]);\n      let item = tableData[index];\n      console.log(item)\n      let data = {\n        invoice: inv,\n        itemNo: item.itemNo,\n      }\n      console.log(data);\n      const res = await inventoryService.linkingCorrect(data);\n      console.log(res);\n      if(res.statusText == \"OK\") {\n        alert(\"SUCCESS\");\n        setProductsInTable();\n      }else {\n        alert(\"Some error occured\");\n        setProductsInTable();\n      }\n    }\n\n    const linkManually = async(index) => {\n      console.log(index);\n      console.log(tableData);\n      console.log(tableData[index]);\n      let item = tableData[index];\n      console.log(item)\n      let data = {\n        invoice: inv,\n        itemNo: item.itemNo,\n      }\n      const result = await inventoryService.linkManually(data);\n      console.log(result);\n\n      let logState = {\n        Description: item.description,\n        PosName: item.posName,\n        SKU: item.posSku,\n        Barcode: item.barcode,\n        InvoiceName: inv,\n        ItemCode: item.itemNo,\n        LinkingDate: todayDate,\n        PersonName: userEmail,\n        Size: item.size,\n        UnitCost: item.cost,\n        UnitPrice: item.sellingPrice,\n        InvoiceNo: num,\n        InvoiceDate: day,\n        Department: item.department,\n        CostIncrease: item.priceIncrease == 1 ? \"YES\" : \"\",\n        CostDecrease: item.priceIncrease == -1 ? \"YES\" : \"\",\n        CostSame: item.priceIncrease == 0 ? \"YES\" : \"\"\n\n      }\n\n      console.log(logState);\n      const logResult = await inventoryService.linkManuallyLog(logState);\n      console.log(logResult);\n      \n      \n      if(result.statusText == \"OK\"){\n        setProductsInTable();\n        // setProductsInTableNew(inv, num, day);\n      }else {\n        alert(\"Some error occured in updation\");\n        setProductsInTable();\n        // setProductsInTableNew(inv, num, day);\n      }\n\n\n    }\n\n    const fetchSavedData = async(invoice = inv, no = num, date = day) => {\n        const data =  await tesseractService.GetSavedInvoiceData(invoice, no, date);\n        console.log(data);\n        if(data.length === 0) {\n          alert(\"Invoice doesnt Exist!!\");\n        }else return data[0].InvoiceData;\n        // console.log(data);\n        // console.log(data[0].InvoiceData);\n        \n    };\n\n    const setProductsInTable = () => {\n      setLoader(true);\n      async function invoiceData() {\n        const products = await tesseractService.GetProductDetails(\n          // invoice.slug\n          inv\n        );\n        //console.log(props.selectedInvoice);\n        return products;\n      }\n\n      fetchSavedData().then((ocrData) => {\n        invoiceData()\n          .then((products) => {\n            /**post processing the table data after returning from filter */\n            function convertToUpperCase(obj) {\n              let newObj = {};\n              for (let key in obj) {\n                newObj[key.toUpperCase()] = obj[key];\n              }\n              return newObj;\n            }\n            products = convertToUpperCase(products);\n            console.log(products);\n            // scanInvoiceData.InvoiceData = ocrData;\n          //   setOcrProducts(ocrData);\n            \n          //   console.log(scanInvoiceData);\n            // scanInvoiceData.InvoiceData = ocrData;\n            //console.log(resScnInvDta);\n            //console.log(\"OCERDATa\", ocrData);\n            //console.log(products);\n            //console.log(scanInvoiceData);\n            let table = ocrData.map((row) => {\n              /**For invoices which dont have item no, set description as item no */\n              if (row.itemNo === undefined) {\n                row.itemNo = row.description.trim().toUpperCase();\n              }\n              row.itemNo = row.itemNo.toString().toUpperCase();\n  \n              row.description = row.description;\n                // products[row.itemNo] !== undefined\n                //   ? products[row.itemNo].Description\n                //   : row.description;\n              row.pieces =\n                products[row.itemNo] !== undefined\n                  ? products[row.itemNo].Quantity\n                  : 0;\n              row.sku =\n                products[row.itemNo] !== undefined\n                  ? products[row.itemNo].sku\n                  : \"\";\n              row.barcode =\n                products[row.itemNo] !== undefined\n                  ? products[row.itemNo].Barcode\n                  : \"\";\n              row.posName =\n                products[row.itemNo] !== undefined\n                  ? products[row.itemNo].POS\n                  : \"\";\n              row.markup = 0;\n              row.show = true;\n              row.posSku =\n                products[row.itemNo] !== undefined\n                  ? products[row.itemNo].PosSKU\n                  : \"\";\n              row.isReviewed = \n                products[row.itemNo] !== undefined ? products[row.itemNo].isReviewed : \"\" ;\n              row.size = \n                products[row.itemNo] !== undefined ? products[row.itemNo].Size : \"\";\n              row.department = \n                products[row.itemNo] !== undefined ? products[row.itemNo].Department : \"\";\n              row.cost = \n                products[row.itemNo] !== undefined ? products[row.itemNo].SellerCost : \"\";\n              row.sellingPrice = \n                products[row.itemNo] !== undefined ? products[row.itemNo].SellingPrice : \"\";\n              row.price = \n                products[row.itemNo] !== undefined ? products[row.itemNo].Price : \"\";\n              row.details = \n                products[row.itemNo] !== undefined ? products[row.itemNo].Details : \"\";\n              row.linkingCorrect = \n                products[row.itemNo] !== undefined ? products[row.itemNo].LinkingCorrect : \"\";\n              //console.log(\"department-\" + row.department + \"  cost-\" + row.cost + \"  price\" + row.sellingPrice);\n              let sp = 0;\n              let cp = 0;\n              // const barcode = products.Barcode\n              if (parseInt(row.pieces)) {\n                sp = (parseFloat(row.unitPrice) / parseInt(row.pieces)).toFixed(\n                  2\n                );\n                cp = sp;\n              }\n              if (products[row.itemNo] !== undefined) {\n                if (sp > +products[row.itemNo].SellerCost) {\n                  row[\"priceIncrease\"] = 1;\n                } else if (sp < +products[row.itemNo].SellerCost) {\n                  row[\"priceIncrease\"] = -1;\n                } else if (sp == +products[row.itemNo].SellerCost) {\n                  row[\"priceIncrease\"] = 0;\n                }\n              } else {\n                row[\"priceIncrease\"] = 0;\n              }\n  \n              /**filter out the rows for which qty shipped & extendedPrice is zero */\n              if (row.qty == \"0\" && row.extendedPrice === \"0.00\") {\n                return null;\n              }\n              /**Calulate qty for which qty is not read/scanned by textract */\n              if (!row.qty) {\n                row.qty = (\n                  parseFloat(row.extendedPrice) / parseFloat(row.unitPrice)\n                ).toFixed(0);\n              }\n            return { ...row, sp, cp };\n            });\n            setLoader(false);\n            setTableData(table.filter((data) => data !== null));\n            setItemNoDropdown(Object.keys(products));\n            setProductDetails(products);\n          })\n          .catch((err) => {\n            console.log(\"error on mapping ocrdata\", err)\n            setLoader(false);\n          });\n      });\n    }\n\n    const toggleModal = (x) => {\n      if(x == \"notfounds\"){\n        setShowModal(!showModal);\n      }else {\n        setDetailsModal(!detailsModal);\n      }\n        // setDate(\"\");\n        // setInvNo(\"\");\n      };\n\n    const hicksvilleDropdown = async (data) => {\n          // const res = await inventoryService.getHicksvilleData(value);\n          // const data = res[0].List;\n          console.log(data);\n  \n  \n          let productsString = \"\";\n          for(let i=0;i<data.length;i++){\n            productsString = productsString + data[i].name + '$$$';\n          } \n          let result = productsString.split(\"$$$\");\n        \n          let newData = [];\n          for (let i = 0; i < result.length; i++) {\n            let s = result[i].split(\"@@@\");\n            let obj =\n              {\n                // sku: s[0] === \"nan\" ? null : s[0],\n                // upc: s[1] === \"nan\" ? null : s[1],\n                // altupc1: s[2] === \"nan\" ? null : s[2],\n                // altupc2: s[3] === \"nan\" ? null : s[3],\n                // name: s[4] === \"nan\" ? null : s[4],\n                // vintage: s[5] === \"nan\" ? null : s[5],\n                // totalQty: s[6] === \"nan\" ? null : s[6],\n                // cost: s[7] === \"nan\" ? null : s[7],\n                // pricea: s[8] === \"nan\" ? null : s[8],\n                // priceb: s[9] === \"nan\" ? null : s[9],\n                // pricec: s[10] === \"nan\" ? null : s[10],\n                // department: s[11] === \"nan\" ? null : s[11],\n                // salePrice: s[12] === \"nan\" ? null : s[12],\n                // size: s[13] === \"nan\" ? null : s[13],\n                // pack: s[14] === \"nan\" ? null : s[14],\n                // price: s[15] === \"nan\" ? null : s[15],\n                sku: s[1] === \"nan\" ? null : s[1],\n                upc: s[0] === \"nan\" ? null : s[0],\n                altupc1: s[14] === \"nan\" ? null : s[14],\n                altupc2: s[15] === \"nan\" ? null : s[15],\n                name: s[2] === \"nan\" ? null : s[2],\n                vintage: s[8] === \"nan\" ? null : s[8],\n                totalQty: s[13] === \"nan\" ? null : s[13],\n                cost: s[4] === \"nan\" ? null : s[4],\n                pricea: s[10] === \"nan\" ? null : s[10],\n                priceb: s[11] === \"nan\" ? null : s[11],\n                pricec: s[12] === \"nan\" ? null : s[12],\n                department: s[9] === \"nan\" ? null : s[9],\n                salePrice: s[5] === \"nan\" ? null : s[5],\n                size: s[6] === \"nan\" ? null : s[6],\n                pack: s[7] === \"nan\" ? null : s[7],\n                price: s[3] === \"nan\" ? null : s[3],\n              }\n            newData.push(obj);\n          }\n          const filter = newData.map((element) => {\n            let obj = { ...element };\n            obj.label = `${element.name}--${element.price}--${element.upc}--${element.size}--${element.cost}--${element.sku}`;\n            //console.log(obj);\n            return obj; \n          });\n          setHicksvilleData(filter);\n        \n      }\n    \n    const hicksvilleDropdownNew = async (event, value, index) => {\n      console.log(event);\n      console.log(value);\n      console.log(value.length);\n      console.log(tableData[index].itemNo);\n\n      if(!isNaN(value) && value.length>0 && value != tableData[index].itemNo){\n        console.log(\"number\");\n        // setDropdownLoader(true);\n        setFetchingOptions(true);\n        const res = await inventoryService.getHicksvilleData(value.toUpperCase());\n        const data = res;\n        console.log(data);\n\n\n        let productsString = \"\";\n        for(let i=0;i<data.length;i++){\n          productsString = productsString + data[i].name + '$$$';\n        } \n        let result = productsString.split(\"$$$\");\n      \n        let newData = [];\n        for (let i = 0; i < result.length; i++) {\n          let s = result[i].split(\"@@@\");\n          let obj =\n            {\n              // sku: s[0] === \"nan\" ? null : s[0],\n              // upc: s[1] === \"nan\" ? null : s[1],\n              // altupc1: s[2] === \"nan\" ? null : s[2],\n              // altupc2: s[3] === \"nan\" ? null : s[3],\n              // name: s[4] === \"nan\" ? null : s[4],\n              // vintage: s[5] === \"nan\" ? null : s[5],\n              // totalQty: s[6] === \"nan\" ? null : s[6],\n              // cost: s[7] === \"nan\" ? null : s[7],\n              // pricea: s[8] === \"nan\" ? null : s[8],\n              // priceb: s[9] === \"nan\" ? null : s[9],\n              // pricec: s[10] === \"nan\" ? null : s[10],\n              // department: s[11] === \"nan\" ? null : s[11],\n              // salePrice: s[12] === \"nan\" ? null : s[12],\n              // size: s[13] === \"nan\" ? null : s[13],\n              // pack: s[14] === \"nan\" ? null : s[14],\n              // price: s[15] === \"nan\" ? null : s[15],\n              sku: s[1] === \"nan\" ? null : s[1],\n              upc: s[0] === \"nan\" ? null : s[0],\n              altupc1: s[14] === \"nan\" ? null : s[14],\n              altupc2: s[15] === \"nan\" ? null : s[15],\n              name: s[2] === \"nan\" ? null : s[2],\n              vintage: s[8] === \"nan\" ? null : s[8],\n              totalQty: s[13] === \"nan\" ? null : s[13],\n              cost: s[4] === \"nan\" ? null : s[4],\n              pricea: s[10] === \"nan\" ? null : s[10],\n              priceb: s[11] === \"nan\" ? null : s[11],\n              pricec: s[12] === \"nan\" ? null : s[12],\n              department: s[9] === \"nan\" ? null : s[9],\n              salePrice: s[5] === \"nan\" ? null : s[5],\n              size: s[6] === \"nan\" ? null : s[6],\n              pack: s[7] === \"nan\" ? null : s[7],\n              price: s[3] === \"nan\" ? null : s[3],\n            }\n          newData.push(obj);\n        }\n        const filter = newData.map((element) => {\n          let obj = { ...element };\n          obj.label = `${element.name}--${element.price}--${element.upc}--${element.size}--${element.cost}--${element.sku}`;\n          //console.log(obj);\n          return obj; \n        });\n        setHicksvilleData(filter);\n        setOptions(filter);\n\n      }\n\n      if(isNaN(value) && value != null && value.length>=4 && value != tableData[index].itemNo){\n        console.log(\"string\");\n        // setDropdownLoader(true);\n        setFetchingOptions(true);\n        const res = await inventoryService.getHicksvilleData(value.toUpperCase());\n        const data = res;\n        console.log(data);\n\n\n        let productsString = \"\";\n        for(let i=0;i<data.length;i++){\n          productsString = productsString + data[i].name + '$$$';\n        } \n        let result = productsString.split(\"$$$\");\n      \n        let newData = [];\n        for (let i = 0; i < result.length; i++) {\n          let s = result[i].split(\"@@@\");\n          let obj =\n            {\n              // sku: s[0] === \"nan\" ? null : s[0],\n              // upc: s[1] === \"nan\" ? null : s[1],\n              // altupc1: s[2] === \"nan\" ? null : s[2],\n              // altupc2: s[3] === \"nan\" ? null : s[3],\n              // name: s[4] === \"nan\" ? null : s[4],\n              // vintage: s[5] === \"nan\" ? null : s[5],\n              // totalQty: s[6] === \"nan\" ? null : s[6],\n              // cost: s[7] === \"nan\" ? null : s[7],\n              // pricea: s[8] === \"nan\" ? null : s[8],\n              // priceb: s[9] === \"nan\" ? null : s[9],\n              // pricec: s[10] === \"nan\" ? null : s[10],\n              // department: s[11] === \"nan\" ? null : s[11],\n              // salePrice: s[12] === \"nan\" ? null : s[12],\n              // size: s[13] === \"nan\" ? null : s[13],\n              // pack: s[14] === \"nan\" ? null : s[14],\n              // price: s[15] === \"nan\" ? null : s[15],\n              sku: s[1] === \"nan\" ? null : s[1],\n              upc: s[0] === \"nan\" ? null : s[0],\n              altupc1: s[14] === \"nan\" ? null : s[14],\n              altupc2: s[15] === \"nan\" ? null : s[15],\n              name: s[2] === \"nan\" ? null : s[2],\n              vintage: s[8] === \"nan\" ? null : s[8],\n              totalQty: s[13] === \"nan\" ? null : s[13],\n              cost: s[4] === \"nan\" ? null : s[4],\n              pricea: s[10] === \"nan\" ? null : s[10],\n              priceb: s[11] === \"nan\" ? null : s[11],\n              pricec: s[12] === \"nan\" ? null : s[12],\n              department: s[9] === \"nan\" ? null : s[9],\n              salePrice: s[5] === \"nan\" ? null : s[5],\n              size: s[6] === \"nan\" ? null : s[6],\n              pack: s[7] === \"nan\" ? null : s[7],\n              price: s[3] === \"nan\" ? null : s[3],\n            }\n          newData.push(obj);\n        }\n        const filter = newData.map((element) => {\n          let obj = { ...element };\n          if(element.itemNo != \"undefined\"){\n          obj.label = `${element.name}--${element.price}--${element.upc}--${element.size}--${element.cost}--${element.sku}`;\n          }\n          //console.log(obj);\n          return obj; \n        });\n        setHicksvilleData(filter);\n        setOptions(filter);\n      }\n      setFetchingOptions(false);\n    }\n\n    const searchDropdown = (target, value) =>  {\n      console.log(target);\n      console.log(value);\n      const options  = hicksvilleData.filter((item) => {\n        if(item.name){\n          let name = item.name;\n          name = name.toLowerCase();\n          value = value.toLowerCase();\n          // console.log(name)\n          return name.search(value) != -1;\n        }\n      })\n      console.log(options);\n      setOptions(options);\n      setFetchingOptions(false);\n\n    }\n\n    const updateItemOld = (ocrCost) => {\n        //console.log(showPosState);\n        const data = {\n          invoiceName: invoice.slug,\n          itemName: showPosState.item,\n          value: { \n            POS: showPosState.pos, \n            Barcode: showPosState.barcode, \n            PosSKU: showPosState.posSku, \n            isReviewed: \"true\",\n            Size: showPosState.size, \n            Department: showPosState.department,\n            //SellerCost: showPosState.unitCost,\n            SellingPrice: showPosState.unitPrice\n          },\n        };\n    \n        inventoryService\n        .UpdateProductFields(data)\n        .then((res) => {\n          if (!res) {\n            throw new Error(\"Product not created\")\n          }\n          console.log(res);\n          alert(\"Successfully updated fields\");\n        })\n        .catch((err) => {\n          console.log(err);\n          alert(\"Some error occuured in creating product\");\n        })\n        .finally(() => { \n          setLoader(false)\n          setStateUpdated(\"true\");\n          //  console.log(ocrCost);\n          //  console.log(unitCost);\n           if(ocrCost>unitCost){\n             setCostInc(\"true\");\n             setCostDec(\"\");\n           }\n           if(ocrCost<unitCost){\n             setCostDec(\"true\");\n             setCostInc(\"\");\n           }\n        });\n    \n    }\n\n    const updateItem = (props, ocrCost) => {\n      let data;\n      //console.log(showPosState);\n      if(notFounds === \"true\"){\n        // console.log(props.selectedInvoice);\n        console.log(\"notfoundstrue\");\n        data = {\n          invoiceName: inv,\n          itemName: showPosState.item,\n          value: { \n            POS: showPosState.pos, \n            Barcode: showPosState.barcode, \n            PosSKU: showPosState.posSku, \n            isReviewed: \"true\",\n            Description: showPosState.description,\n            Size: showPosState.size, \n            Department: showPosState.department,\n            SellerCost: showPosState.unitCost,\n            SellingPrice: showPosState.unitPrice,\n            Quantity: unitsInCase,\n            Price: price,\n            LinkingCorrect: \"true\"\n          },\n        };\n  \n        toggleModal(\"notfounds\");\n      \n      }else{\n        data = {\n          invoiceName: inv,\n          itemName: showPosState.item,\n          value: { \n            POS: showPosState.pos, \n            Barcode: showPosState.barcode, \n            PosSKU: showPosState.posSku, \n            isReviewed: \"true\",\n            Size: showPosState.size, \n            Department: showPosState.department,\n            SellerCost: showPosState.unitCost,\n            SellingPrice: showPosState.unitPrice,\n            LinkingCorrect: \"true\"\n          },\n        };\n      }\n  \n      console.log(data)\n      inventoryService\n      .UpdateProductFields(data)\n      .then((res) => {\n        if (!res) {\n          throw new Error(\"Product not created\")\n        }\n        console.log(res);\n        alert(\"Successfully updated fields\");\n        setStateUpdated(true);\n      })\n      .catch((err) => {\n        console.log(err);\n        alert(\"Some error occuured in creating product\");\n      })\n      .finally(async () => { setLoader(false);\n                     setStateUpdated(\"true\");\n                    //  console.log(ocrCost);\n                    //  console.log(unitCost);\n                    if(ocrCost>unitCost){\n                      setCostInc(\"true\");\n                      setCostDec(\"\");\n                    }\n                    if(ocrCost<unitCost){\n                      setCostDec(\"true\");\n                      setCostInc(\"\");\n                    }\n                    if(notFounds === \"true\"){\n                      setNotFounds(\"false\");\n                      setUnitsInCase(\"\");\n                      setPrice(\"\");\n                    }\n                    console.log(userEmail);\n                    const description = tableData[showPosIndex].description;\n                    const costChange = tableData[showPosIndex].priceIncrease;\n                    let a = \"\", b = \"\", c = \"\";\n                    if(costChange == 1) a = \"YES\";\n                    if(costChange == -1) b = \"YES\";\n                    if(costChange == 0) c = \"YES\"\n                    console.log(costChange);\n                    console.log(description);\n                    console.log(todayDate);\n                    console.log(day);\n                    console.log(num);\n                    const logState = data;\n                    delete logState.value.isReviewed;\n                    logState.Description = description;\n                    logState.PersonName = userEmail;\n                    logState.LinkingDate = todayDate;\n                    logState.InvoiceDate = day;\n                    logState.InvoiceNo = num;\n                    logState.CostIncrease = a;                     \n                    logState.CostDecrease = b; \n                    logState.CostSame = c;                   \n                    console.log(logState);\n                    \n\n                    const res = await inventoryService.generateLog(logState);\n                    console.log(res);\n                    setProductsInTable(); \n              });\n      \n  \n    }\n\n    const addRow = () => {\n        let tempTableData = [...tableData];\n        tempTableData.push({\n          qty: 0,\n          itemNo: \"\",\n          description: \"\",\n          pieces: 0,\n          unitPrice: 0.0,\n          extendedPrice: \"\",\n          markup: 0,\n          sp: 0,\n          show: true,\n          showPOS: \"\"\n        });\n        emptyColumnList.push(tempTableData.length - 1);\n        setEmptyColumn(emptyColumnList);\n        setTableData(tempTableData);\n    };\n    const deleteRow = (index) => {\n        let tempTableData = [...tableData];\n        // console.log(emptyColumnList.length, \"before\");\n        if (tableData[index][\"show\"]) {\n          if (window.confirm(\"Delete the item?\")) {\n            tempTableData[index][\"show\"] = false;\n            const i = emptyColumnList.indexOf(index);\n            if (i > -1) {\n              emptyColumnList.splice(i, 1);\n            }\n          }\n        } else {\n          tempTableData[index][\"show\"] = true;\n          if (\n            tempTableData[index][\"qty\"] !== \"\" &&\n            tempTableData[index][\"itemNo\"] !== \"\" &&\n            tempTableData[index][\"unitPrice\"] !== \"\"\n          ) {\n            const i = emptyColumnList.indexOf(index);\n            if (i > -1) {\n              emptyColumnList.splice(i, 1);\n            }\n          } else {\n            emptyColumnList.push(index);\n          }\n        }\n        setTableData(tempTableData);\n        setEmptyColumn(emptyColumnList);\n    };\n\n    const renderInvoiceHeader = () => {\n      return invoiceHeader.map((key, index) => {\n        return (\n          <th\n            key={index}\n            style={{\n              position: \"sticky\",\n              top: \"70px\",\n              background: \"grey\",\n            }}\n          >\n            {key.toUpperCase()}\n          </th>\n        );\n      });\n   };\n\n   const setProductsInTableNew = (index) => {\n    console.log(index);\n    setOpenInvoice(true);\n    console.log(invoiceOptions[index]);\n    let invoice = invoiceOptions[index].InvoiceName;\n    setInv(invoice);\n    let date =  invoiceOptions[index].SavedDate;\n    setDay(date);\n    let no = invoiceOptions[index].SavedInvoiceNo;\n    setNum(no);\n    setLoader(true);\n    async function invoiceData() {\n      const products = await tesseractService.GetProductDetails(\n        invoice\n      );\n      //console.log(props.selectedInvoice);\n      return products;\n    }\n\n    fetchSavedData(invoice, no, date).then((ocrData) => {\n      invoiceData()\n        .then((products) => {\n          /**post processing the table data after returning from filter */\n          function convertToUpperCase(obj) {\n            let newObj = {};\n            for (let key in obj) {\n              newObj[key.toUpperCase()] = obj[key];\n            }\n            return newObj;\n          }\n          products = convertToUpperCase(products);\n          console.log(products);\n          // scanInvoiceData.InvoiceData = ocrData;\n        //   setOcrProducts(ocrData);\n          \n        //   console.log(scanInvoiceData);\n          // scanInvoiceData.InvoiceData = ocrData;\n          //console.log(resScnInvDta);\n          //console.log(\"OCERDATa\", ocrData);\n          //console.log(products);\n          //console.log(scanInvoiceData);\n          let table = ocrData.map((row) => {\n            /**For invoices which dont have item no, set description as item no */\n            if (row.itemNo === undefined) {\n              row.itemNo = row.description.trim().toUpperCase();\n            }\n            row.itemNo = row.itemNo.toString().toUpperCase();\n\n            row.description = row.description;\n              // products[row.itemNo] !== undefined\n              //   ? products[row.itemNo].Description\n              //   : row.description;\n            row.pieces =\n              products[row.itemNo] !== undefined\n                ? products[row.itemNo].Quantity\n                : 0;\n            row.sku =\n              products[row.itemNo] !== undefined\n                ? products[row.itemNo].sku\n                : \"\";\n            row.barcode =\n              products[row.itemNo] !== undefined\n                ? products[row.itemNo].Barcode\n                : \"\";\n            row.posName =\n              products[row.itemNo] !== undefined\n                ? products[row.itemNo].POS\n                : \"\";\n            row.markup = 0;\n            row.show = true;\n            row.posSku =\n              products[row.itemNo] !== undefined\n                ? products[row.itemNo].PosSKU\n                : \"\";\n            row.isReviewed = \n              products[row.itemNo] !== undefined ? products[row.itemNo].isReviewed : \"\" ;\n            row.size = \n              products[row.itemNo] !== undefined ? products[row.itemNo].Size : \"\";\n            row.department = \n              products[row.itemNo] !== undefined ? products[row.itemNo].Department : \"\";\n            row.cost = \n              products[row.itemNo] !== undefined ? products[row.itemNo].SellerCost : \"\";\n            row.sellingPrice = \n              products[row.itemNo] !== undefined ? products[row.itemNo].SellingPrice : \"\";\n            row.price = \n              products[row.itemNo] !== undefined ? products[row.itemNo].Price : \"\";\n            row.details = \n              products[row.itemNo] !== undefined ? products[row.itemNo].Details : \"\";\n            row.linkingCorrect = \n              products[row.itemNo] !== undefined ? products[row.itemNo].LinkingCorrect : \"\";\n            //console.log(\"department-\" + row.department + \"  cost-\" + row.cost + \"  price\" + row.sellingPrice);\n            let sp = 0;\n            let cp = 0;\n            // const barcode = products.Barcode\n            if (parseInt(row.pieces)) {\n              sp = (parseFloat(row.unitPrice) / parseInt(row.pieces)).toFixed(\n                2\n              );\n              cp = sp;\n            }\n            if (products[row.itemNo] !== undefined) {\n              if (sp > +products[row.itemNo].SellerCost) {\n                row[\"priceIncrease\"] = 1;\n              } else if (sp < +products[row.itemNo].SellerCost) {\n                row[\"priceIncrease\"] = -1;\n              } else if (sp == +products[row.itemNo].SellerCost) {\n                row[\"priceIncrease\"] = 0;\n              }\n            } else {\n              row[\"priceIncrease\"] = 0;\n            }\n\n            /**filter out the rows for which qty shipped & extendedPrice is zero */\n            if (row.qty == \"0\" && row.extendedPrice === \"0.00\") {\n              return null;\n            }\n            /**Calulate qty for which qty is not read/scanned by textract */\n            if (!row.qty) {\n              row.qty = (\n                parseFloat(row.extendedPrice) / parseFloat(row.unitPrice)\n              ).toFixed(0);\n            }\n          return { ...row, sp, cp };\n          });\n          setLoader(false);\n          setTableData(table.filter((data) => data !== null));\n          setItemNoDropdown(Object.keys(products));\n          setProductDetails(products);\n        })\n        .catch((err) => {\n          console.log(\"error on mapping ocrdata\", err)\n          setLoader(false);\n        });\n    });\n  }\n\n   const renderInvoiceTable = () => {   \n    const invoiceList = invoiceOptions.map((element, index) => {\n      return (\n        <tr key={index}>\n          <td>{index+1}</td>\n          <td>{element.InvoiceName}</td>\n          <td>{element.SavedInvoiceNo}</td>\n          <td>{element.SavedDate}</td>\n          <td>\n            <button \n              style={{\n                backgroundColor: \"#4CAF50\",\n                border: \"none\",\n                color: \"white\",\n                padding: \"15px 32px\",\n                textAlign: \"center\",\n                textDecoration: \"none\",\n                display: \"inline-block\",\n                fontSize: \"12px\",\n                margin: \"4px 2px\",\n                cursor: \"pointer\"\n              }}\n              onClick={() => {\n                setProductsInTableNew(index)\n              }}\n            >Show Invoice\n            </button>\n          </td>\n        </tr>\n        );\n      })\n    return (\n      <div style={{ marginTop: \"70px\" }}>\n        <table className=\"table table-hover table-responsive-sm\">\n          <tbody>\n            <tr>{renderInvoiceHeader()}</tr>\n            {invoiceList}\n          </tbody>\n        </table>\n      </div>\n    );     \n  }\n\n    const renderTableHeader = () => {\n        return header.map((key, index) => {\n          return (\n            <th\n              key={index}\n              style={{\n                position: \"sticky\",\n                top: \"70px\",\n                background: \"grey\",\n              }}\n            >\n              {key.toUpperCase()}\n            </th>\n          );\n        });\n    };\n\n    const renderTableData = () => {\n        // hicksvilleDropdown(HicksData);\n    \n        if (tableData) {\n          console.log(tableData);\n    \n          // console.log(showPosIndex);\n          // console.log(tableData[0]);\n          \n          let rows = tableData.map((element, index) => {\n            //fuzzwuzzSuggestion = getFuzzwuzzSuggestion(element.description);\n            let isEmpty =\n              element.qty === \"\" ||\n              element.itemNo === \"\" ||\n              !element.pieces ||\n              isNaN(element.unitPrice) ||\n              element.unitPrice === \"\" ||\n              isNaN(element.extendedPrice);\n            if (isEmpty && element.show) {\n              let emptyColumn = [...emptyColumnList, index];\n              emptyColumnList = [...new Set(emptyColumn)];\n            }\n            let isFree = element.qty != 0 && element.extendedPrice === \"0.00\";\n            // console.log(element.isUpdated);\n    \n            return (\n              <tr\n                key={index}\n                className={isEmpty ? styles.red : isFree ? styles.free : null}\n                // style={element.show ? { opacity: \"1\" } : { opacity: \"0.4\" }}\n                style={element.linkingCorrect == \"false\" ? {backgroundColor: \"orange\"} : element.isUpdated === \"true\"  ? {backgroundColor: \"lightGreen\"}\n                  : element.show ? { opacity: \"1\" } : { opacity: \"0.4\" }}\n              >\n                <td>{index + 1}</td>\n                <td className={styles.element}>\n                  <IconButton onClick={() => {\n                    toggleModal(\"details\");\n                    setDetailsIndex(index);\n                    }}>\n                      <AddCircleIcon />\n                    </IconButton>\n                    <div className={styles.tooltip}>\n                      <p>Details- {element.details}</p>\n                    </div>\n                    \n                </td>\n                {/* <td>\n                  <TextField\n                    type=\"tel\"\n                    value={element.details}\n                    id=\"outlined-secondary\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      handleChange(index, \"details\", e.target.value);\n                    }}\n                    style={{ width: 100 }}\n                  />\n                </td> */}\n                <td className={styles.element}>\n                  <TextField\n                    type=\"tel\"\n                    value={showPosIndex === index ? showPosState.barcode : element.barcode}\n                    id=\"outlined-secondary\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      handleChange(index, \"barcode\", e.target.value);\n                    }}\n                    style={{ width: 150 }}\n                  />\n                  <IconButton\n                    color=\"primary\"\n                    aria-label=\"add to review\"\n                    // onClick={() => addForReview(element, index)}\n                  >\n                    <InfoOutlinedIcon\n                      style={\n                        reviewItems.includes(index)\n                          ? { backgroundColor: \"green\" }\n                          : null\n                      }\n                    /> \n                    {/* <AddShoppingCartIcon\n                      style={\n                        reviewItems.includes(index)\n                          ? { backgroundColor: \"green\" }\n                          : null\n                      }\n                    /> */}\n                  </IconButton>\n                  <div className={element.isReviewed  === \"true\" || (showPosIndex === index && stateUpdated === \"true\") ? styles.tooltipIsReviewed: styles.tooltip} >\n                    <p>POS Product- {showPosIndex === index ? showPosState.pos : element.posName }</p>\n                    {/* <p>UPC- {showPosIndex === index ? showPosState.barcode : element.barcode}</p> */}\n                    <p>Size- {showPosIndex === index ? showPosState.size : element.size}</p>\n                    <p>Department - {showPosIndex === index ? showPosState.department : element.department}</p>\n                    <p>Unit Cost- {showPosIndex === index ? showPosState.unitCost : element.cost}</p> \n                    <p>Unit Price- {showPosIndex === index ? showPosState.unitPrice : element.sellingPrice}</p>\n                    {/* <p>Price- {showPosIndex === index ? showPosState.price : element.price}</p> */}\n                    <div >\n                    <button onClick={() => {\n                            if(notFounds === \"true\"){\n                              toggleModal(\"notfounds\");\n                            }else{\n                              updateItem(invoice.slug, (parseFloat(element.unitPrice) / parseInt(element.pieces)).toFixed(2))\n                            }\n                          } } \n                      disabled={showPosIndex === index ? false : true}\n                      style={{backgroundColor: \"green\",\n                      border: \"none\",\n                      color: \"white\",\n                      padding: \"4px 8px\",\n                      textAlign: \"center\",\n                      textDecoration: \"none\",\n                      display: \"inline-block\",\n                      fontSize: \"14px\",\n                      align: \"left\"}} >\n                      Update Item\n                    </button>\n                    </div> \n                    <br />\n                    <div>\n                    <button onClick={()=> linkManually(index)} \n                      // disabled={showPosIndex === index ? false : true}\n                      style={{backgroundColor: \"blue\",\n                      border: \"none\",\n                      color: \"white\",\n                      padding: \"4px 8px\",\n                      textAlign: \"center\",\n                      textDecoration: \"none\",\n                      display: \"inline-block\",\n                      fontSize: \"14px\",\n                      align: \"left\"}} >\n                      Link Manually\n                    </button>\n                    </div>\n                    <br />\n                    <div>\n                    <button onClick={()=> reverseUpdate(index)} \n                      // disabled={showPosIndex === index ? false : true}\n                      style={{backgroundColor: \"red\",\n                      border: \"none\",\n                      color: \"white\",\n                      padding: \"4px 8px\",\n                      textAlign: \"center\",\n                      textDecoration: \"none\",\n                      display: \"inline-block\",\n                      fontSize: \"14px\",\n                      align: \"left\"}} >\n                      Reverse Update\n                    </button>\n                    </div>\n                  </div>\n                </td>\n                <td>{showPosIndex === index ? showPosState.posSku : element.posSku}</td>\n                <td>\n                  <TextField\n                    type=\"tel\"\n                    value={element.qty}\n                    id=\"outlined-secondary\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      handleChange(index, \"qty\", e.target.value);\n                    }}\n                    style={{ width: 100 }}\n                  />\n                </td>\n                <td>\n                  <Autocomplete\n                    value={element.itemNo}\n                    onChange={(event, newValue) => {\n                      if (newValue) {\n                        handleChange(index, \"itemNo\", newValue);\n                      }\n                    }}\n                    id=\"combo-box\"\n                    options={itemNoDropdown}\n                    getOptionLabel={(option) => option}\n                    style={{ width: 200 }}\n                    renderInput={(params) => (\n                      <TextField {...params} variant=\"outlined\" />\n                    )}\n                  />\n                </td>\n                <td>\n                {/* {dropdownIndex == index ? fetchingOptions ? <Loading type=\"ThreeDots\" height={40} width={40} /> : null : null} */}\n                  <Autocomplete\n                    value={showPosIndex  === index ? showPosState.item : element.itemNo }\n                    loading={true}\n                    onInputChange={(event, value) => {\n                      setOptions([]);\n                      console.log(\"ON INPUT CHANGE\");\n                      // event.toLowerCase();\n                      // value.toLowerCase();\n                      // console.log(event.target.value);\n                      // console.log(value);\n                      // searchDropdown(event, value);\n                      // setOptions([]);\n                      if(value != element.itemNo){\n                        setTimeout(()=> {\n                          hicksvilleDropdownNew(event, value, index);\n\n                        }, 1500);\n                      }\n                      // hicksvilleDropdownNew(event, value, index);\n                    }}\n                    onChange={(event, newValue) => {\n                      // console.log(event.target.value);\n                      // console.log(newValue);\n                      if (newValue) {\n                        let newState = { ...showPosState };\n                        console.log(newValue);\n                        // newState.item = newValue.name;\n                        newState.item = element.itemNo\n                        newState.description = newValue.name;\n                        newState.barcode = newValue.upc;\n                        newState.pos = newValue.name;\n                        newState.posSku = newValue.sku;\n                        newState.size = newValue.size;\n                        newState.department = newValue.department;\n                        newState.unitCost = newValue.cost;\n                        newState.unitPrice = newValue.price;\n                        setShowPosState(newState);\n                        setShowPosIndex(index);\n                        setUnitCost(newValue.cost);\n                        setStateUpdated(\"\");\n                        if(isEmpty){\n                          setNotFounds(\"true\");\n                          setRedState(\"false\");\n                        }\n                        //setDisabled(false);\n                        //updateOnHoverDetails(index);\n                        //setShowPosIndex(index);\n                        // console.log(newValue);\n                        console.log(newState);\n                        //console.log(showPosState);\n                        \n                      }\n                    }}\n                    id=\"combo-box\"\n                    // options={element.fuzzSuggestion}\n                    options={options}\n                    // getOptionLabel={option => option.label}\n                    getOptionLabel={(option) => option.label ?? element.itemNo}\n                    // getOptionLabel={(option) => dropdownLoader ? <Spinner /> : option.label}\n                    style={{ width: 400 }}\n                    filterOptions={(options, state) => options}\n                    renderInput={(params) => (\n                      <TextField {...params} variant=\"outlined\" />\n                    )}\n                  />\n                </td>\n                \n                <td>{element.description}</td>\n                <td>{element.pieces}</td>\n                <td>\n                  <TextField\n                    type=\"tel\"\n                    value={element.unitPrice}\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      handleChange(index, \"unitPrice\", e.target.value);\n                    }}\n                    style={\n                      element.priceIncrease === 1\n                        ? { backgroundColor: \"#1a8cff\", width: 100 }\n                        : element.priceIncrease === -1\n                        ? { backgroundColor: \"#ffb31a\", width: 100 }\n                        : { width: 100 }\n                      // showPosIndex === index ? costInc===\"true\" ? { backgroundColor: \"#1a8cff\", width: 100 } : costDec===\"true\" ? { backgroundColor: \"#ffb31a\", width: 100 } : {width: 100}\n                      //   : element.priceIncrease === 1 \n                      //       ? { backgroundColor: \"#1a8cff\", width: 100 }\n                      //       : element.priceIncrease === -1 \n                      //       ? { backgroundColor: \"#ffb31a\", width: 100 }\n                      //       : { width: 100 }\n                    }\n                  />\n                </td>\n                <td>{element.extendedPrice}</td>\n                <td>{element.cp}</td>\n                <td>\n                  <TextField\n                    type=\"tel\"\n                    value={element.sp}\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      handleChange(index, \"sp\", e.target.value);\n                    }}\n                    style={{ width: 100 }}\n                  />\n                </td>\n                <td>{element.markup}</td>\n                {/* <td>\n                  <Checkbox\n                    checked={!element.show}\n                    onChange={(e) => handleChange(index, \"show\", e.target.value)}\n                    inputProps={{ \"aria-label\": \"primary checkbox\" }}\n                  />\n                </td> */}\n                <td>\n              <Button\n                text={element.show ? \"Delete\" : \"Undo\"}\n                color=\"btn btn-info\"\n                type=\"submit\"\n                onClick={() => deleteRow(index)}\n              />\n            </td>\n                <td>\n                <Button \n                    text=\"Update POS\"\n                    color=\"btn btn-info\"\n                    type=\"submit\"\n                    onClick={() => pushSingleItemToInventory(index)}\n                    style={{ width: 120 }}\n                  />\n                      \n                </td>\n                <td>\n                <Button \n                    text=\"Reverse POS\"\n                    type=\"submit\"\n                    onClick={() => reversePOSUpdate(index)}\n                    style={{ width: 120, backgroundColor: \"red\", color: \"white\" }}\n                  />\n                      \n                </td>\n                <td className={styles.element}>\n                  <IconButton onClick={() => linkingCorrect(index)}>\n                    <Cancel/>\n                  </IconButton>\n                </td>\n                <td>{index + 1}</td>\n                {/* <td>\n                  <Button\n                    text={element.show ? \"Delete\" : \"Undo\"}\n                    color=\"btn btn-info\"\n                    type=\"submit\"\n                    onClick={() => deleteRow(index)}\n                  />\n                </td> */}\n              </tr>\n            );\n          });\n          return (\n            <div style={{ marginTop: \"70px\" }}>\n              <table className=\"table table-hover table-responsive-sm\">\n                <tbody>\n                  <tr>{renderTableHeader()}</tr>\n                  {rows}\n                  <tr>\n                    <td>\n                      <Button\n                        text=\"Add cell\"\n                        color=\"btn btn-info\"\n                        onClick={addRow}\n                      />\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <div className={styles.divRow}>\n                <Button\n                  text=\"Update Inventory\"\n                  color=\"btn btn-info\"\n                  type=\"submit\"\n                  onClick={pushInventoryDetails}\n                />\n                {/* <Button\n                  text=\"Save Invoice Data\"\n                  color=\"btn btn-info\"\n                  type=\"submit\"\n                  onClick={toggleModal}\n                /> */}\n                <Button\n                  text=\"Re upload\"\n                  color=\"btn btn-info\"\n                  type=\"submit\"\n                  onClick={() => window.location.reload()}\n                />\n              </div>\n            </div>\n          );\n        }\n    };\n\n    const pushInventoryDetails = async () => {\n        const notFoundItems = emptyColumn.map((i) => tableData[i]);\n        const tempTable = [];\n        tableData.forEach((element, index) => {\n          if (\n            !emptyColumn.includes(index) &&\n            element.show === true &&\n            element[\"isForReview\"] != true\n          ) {\n            let rowData = { index: index + 1, ...element };\n            tempTable.push(rowData);\n          }\n        });\n        // console.log(\"notFoundItems\", notFoundItems);\n        // console.log(\"final table data\", tempTable);\n    \n        if (emptyColumn.length !== 0) {\n          /**api to push  to not found list*/\n          setLoader(true);\n          const responses = await Promise.all(\n            notFoundItems.map(async (product) => {\n              try {\n                const data = {\n                  Item: product.itemNo,\n                  Description: product.description,\n                  Quantity: product.qty,\n                  Price: product.unitPrice,\n                  sku: product.sku,\n                  Barcode: product.barcode,\n                  PosSKU: product.posSku,\n                  InvoiceName: invoice.slug,\n                };\n                await inventoryService.CreateNotFoundItems(data);\n                return true;\n              } catch (error) {\n                console.log(\n                  \"Couldn't create not found product\",\n                  product.description,\n                  { error }\n                );\n                alert(\"Couldn't create product on website.\");\n                return null;\n              }\n            })\n          );\n          setLoader(false);\n        }\n        const priceIncreasedProducts = tempTable.filter(\n          (product) => product.priceIncrease !== 0\n        );\n        setLoader(true);\n        const res = await Promise.all(\n          priceIncreasedProducts.map(async (product) => {\n            try {\n              const data = {\n                invoiceName: invoice,\n                itemName: product.itemNo,\n                value: { Price: product.unitPrice },\n              };\n              await inventoryService.UpdateProductFields(data);\n            } catch (error) {\n              console.log(`couldn't update price for product ${product.itemNo}`);\n            }\n          })\n        );\n        setLoader(false);\n        setInventoryData(mergeDuplicates(tempTable));\n        setPushToInventory(true);\n    };\n\n    const handleChange = async (row, key, value) => {\n        let tempTableData = [...tableData];\n        tempTableData[row][key] = value;\n        const { itemNo } = tempTableData[row];\n        if (\n          tempTableData[row][\"qty\"] !== \"\" &&\n          tempTableData[row][\"itemNo\"] !== \"\" &&\n          tempTableData[row][\"unitPrice\"] !== \"\"\n        ) {\n          const index = emptyColumnList.indexOf(row);\n          if (index > -1) {\n            emptyColumnList.splice(index, 1);\n          }\n        } else {\n          emptyColumnList.push(row);\n        }\n        setEmptyColumn(emptyColumnList);\n        if (key === \"itemNo\") {\n          tempTableData[row][\"description\"] = productDetails[value].Description;\n          tempTableData[row][\"pieces\"] = productDetails[value].Quantity;\n          tempTableData[row][\"sku\"] = productDetails[value].sku;\n          /**auto populate barcode & other pos fields*/\n          tempTableData[row][\"barcode\"] = productDetails[value].Barcode;\n          tempTableData[row][\"posName\"] = productDetails[value].POS;\n          tempTableData[row][\"posSku\"] = productDetails[value].PosSKU;\n        }\n    \n        if (key === \"unitPrice\" || key === \"sp\" || key === \"itemNo\") {\n          let cp = parseFloat(tempTableData[row][\"cp\"]);\n          let sp = parseFloat(tempTableData[row][\"sp\"]);\n          let markup = ((sp - cp) / cp) * 100;\n          let cost =\n            parseFloat(tempTableData[row][\"unitPrice\"]) /\n            tempTableData[row][\"pieces\"];\n          // let sp = cp + (cp * markup) / 100;\n          // if (tempTableData[row][\"pieces\"]) {\n          //   sp = sp / tempTableData[row][\"pieces\"];\n          // }\n          tempTableData[row][\"markup\"] = isNaN(markup) ? 0 : markup.toFixed(2);\n          tempTableData[row][\"cp\"] = isNaN(cost) ? 0 : cost.toFixed(2);\n        }\n    \n        if (key === \"qty\" || key === \"unitPrice\") {\n          const extendedPrice =\n            parseFloat(tempTableData[row][\"qty\"]) *\n            parseFloat(tempTableData[row][\"unitPrice\"]);\n          const cp = tempTableData[row][\"unitPrice\"] / tempTableData[row][\"pieces\"];\n          if (!isNaN(extendedPrice)) {\n            tempTableData[row][\"extendedPrice\"] = extendedPrice.toFixed(2);\n          }\n          if (!isNaN(cp)) {\n            tempTableData[row][\"cp\"] = cp.toFixed(2);\n          }\n        }\n        if (itemNo) {\n          if (+tempTableData[row][\"unitPrice\"] > +productDetails[itemNo].Price) {\n            tempTableData[row][\"priceIncrease\"] = 1;\n          } else if (\n            +tempTableData[row][\"unitPrice\"] < +productDetails[itemNo].Price\n          ) {\n            tempTableData[row][\"priceIncrease\"] = -1;\n          } else if (\n            +tempTableData[row][\"unitPrice\"] == +productDetails[itemNo].Price\n          ) {\n            tempTableData[row][\"priceIncrease\"] = 0;\n          }\n        }\n    \n        if (key === \"barcode\") {\n          tempTableData[row][\"barcode\"] = value;\n        }\n        setTableData(tempTableData);\n    };\n\n    const mergeDuplicates = (a) => {\n        let arr = [...a];\n        let map = new Map();\n        for (let i = 0; i < arr.length; i++) {\n          if (!map.has(arr[i].itemNo)) map.set(arr[i].itemNo, arr[i]);\n          else {\n            let obj = { ...map.get(arr[i].itemNo) };\n            obj[\"qty\"] = (\n              parseFloat(obj[\"qty\"]) + parseFloat(arr[i].qty)\n            ).toString();\n            map.set(arr[i].itemNo, obj);\n          }\n        }\n        let newArr = [];\n        for (let x of map.values()) newArr.push(x);\n        return newArr;\n    };\n\n    useEffect(() => {\n      // hicksvilleDropdown();\n      // hicksvilleDropdown();\n      const curDate = new Date();\n      console.log(curDate);\n      let date = curDate.getFullYear()+ \"-\" + (curDate.getMonth()+1) +\"-\"+ curDate.getDate();\n      console.log(date);\n      setTodayDate(date);\n      // hicksvilleDropdown(HicksData);\n      firebase.auth().onAuthStateChanged(function(user) {\n        if (user) {\n          setUserEmail(user.email);\n            console.log('This is the user: ', user)\n            console.log('This is the user: ', user.email);\n        } else {\n            // No user is signed in.\n            console.log('There is no logged in user');\n        }\n    });\n    \n\n\n        /**Fetch the data from the aws textract for the image */\n        // async function fetchOCRData() {\n        //   // return chetak();\n    \n        //   setLoader(true);\n        //   const ocrData = [];\n\n\n\n        //   let newData = [];\n        //   ocrData.forEach((data) => (newData = [...newData, ...data]));\n        //   return newData;\n        // }\n    \n        // async function invoiceData() {\n        //   const products = await tesseractService.GetProductDetails(\n        //     invoice\n        //   );\n        //   //console.log(props.selectedInvoice);\n        //   return products;\n        // }\n\n        // fetchOCRData().then((ocrData) => {\n        //   invoiceData()\n        //     .then((products) => {\n        //       /**post processing the table data after returning from filter */\n        //       function convertToUpperCase(obj) {\n        //         let newObj = {};\n        //         for (let key in obj) {\n        //           newObj[key.toUpperCase()] = obj[key];\n        //         }\n        //         return newObj;\n        //       }\n        //       products = convertToUpperCase(products);\n        //       console.log(products);\n        //       // scanInvoiceData.InvoiceData = ocrData;\n        //     //   setOcrProducts(ocrData);\n              \n        //     //   console.log(scanInvoiceData);\n        //       // scanInvoiceData.InvoiceData = ocrData;\n        //       //console.log(resScnInvDta);\n        //       //console.log(\"OCERDATa\", ocrData);\n        //       //console.log(products);\n        //       //console.log(scanInvoiceData);\n        //       let table = ocrData.map((row) => {\n        //         /**For invoices which dont have item no, set description as item no */\n        //         if (row.itemNo === undefined) {\n        //           row.itemNo = row.description.trim().toUpperCase();\n        //         }\n        //         row.itemNo = row.itemNo.toString().toUpperCase();\n    \n        //         row.description =\n        //           products[row.itemNo] !== undefined\n        //             ? products[row.itemNo].Description\n        //             : row.description;\n        //         row.pieces =\n        //           products[row.itemNo] !== undefined\n        //             ? products[row.itemNo].Quantity\n        //             : 0;\n        //         row.sku =\n        //           products[row.itemNo] !== undefined\n        //             ? products[row.itemNo].sku\n        //             : \"\";\n        //         row.barcode =\n        //           products[row.itemNo] !== undefined\n        //             ? products[row.itemNo].Barcode\n        //             : \"\";\n        //         row.posName =\n        //           products[row.itemNo] !== undefined\n        //             ? products[row.itemNo].POS\n        //             : \"\";\n        //         row.markup = 0;\n        //         row.show = true;\n        //         row.posSku =\n        //           products[row.itemNo] !== undefined\n        //             ? products[row.itemNo].PosSKU\n        //             : \"\";\n        //         row.isReviewed = \n        //           products[row.itemNo] !== undefined ? products[row.itemNo].isReviewed : \"\" ;\n        //         row.size = \n        //           products[row.itemNo] !== undefined ? products[row.itemNo].Size : \"\";\n        //         row.department = \n        //           products[row.itemNo] !== undefined ? products[row.itemNo].Department : \"\";\n        //         row.cost = \n        //           products[row.itemNo] !== undefined ? products[row.itemNo].SellerCost : \"\";\n        //         row.sellingPrice = \n        //           products[row.itemNo] !== undefined ? products[row.itemNo].SellingPrice : \"\";\n        //         //console.log(\"department-\" + row.department + \"  cost-\" + row.cost + \"  price\" + row.sellingPrice);\n        //         let sp = 0;\n        //         let cp = 0;\n        //         // const barcode = products.Barcode\n        //         if (parseInt(row.pieces)) {\n        //           sp = (parseFloat(row.unitPrice) / parseInt(row.pieces)).toFixed(\n        //             2\n        //           );\n        //           cp = sp;\n        //         }\n        //         if (products[row.itemNo] !== undefined) {\n        //           if (+row.unitPrice > +products[row.itemNo].Price) {\n        //             row[\"priceIncrease\"] = 1;\n        //           } else if (+row.unitPrice < +products[row.itemNo].Price) {\n        //             row[\"priceIncrease\"] = -1;\n        //           } else if (+row.unitPrice == +products[row.itemNo].Price) {\n        //             row[\"priceIncrease\"] = 0;\n        //           }\n        //         } else {\n        //           row[\"priceIncrease\"] = 0;\n        //         }\n    \n        //         /**filter out the rows for which qty shipped & extendedPrice is zero */\n        //         if (row.qty == \"0\" && row.extendedPrice === \"0.00\") {\n        //           return null;\n        //         }\n        //         /**Calulate qty for which qty is not read/scanned by textract */\n        //         if (!row.qty) {\n        //           row.qty = (\n        //             parseFloat(row.extendedPrice) / parseFloat(row.unitPrice)\n        //           ).toFixed(0);\n        //         }\n        //       return { ...row, sp, cp };\n        //       });\n        //       setLoader(false);\n        //       setTableData(table.filter((data) => data !== null));\n        //       setItemNoDropdown(Object.keys(products));\n        //       setProductDetails(products);\n        //     })\n        //     .catch((err) => {\n        //       console.log(\"error on mapping ocrdata\", err)\n        //       setLoader(false);\n        //     });\n        // });\n    }, []);\n\n    if (loader) {\n      return <Spinner />;\n    }\n    return(\n\n        <div className=\"container-fluid\">\n            <Paper className={classes.root}>\n                <Grid style={{ display: \"flex\" }}>\n                    <Autocomplete\n                        value={invoice}\n                        onChange={(event, newValue) => {\n                            // console.log(\"new value\", newValue)\n                            if (newValue) {\n                            setInvoice(newValue);\n                            }\n                            // getInvoices(newValue);\n                        }}\n                        id=\"combo-box\"\n                        options={dropdownOptions}\n                        getOptionLabel={(option) => option.value}\n                        style={{ width: 250 }}\n                        autoHighlight\n                        renderInput={(params) => (\n                            <TextField {...params} label={dropdownLabel} variant=\"outlined\" />\n                        )}\n                    />\n                    {/* <Autocomplete\n                        value={invoiceNo}\n                        onChange={(event, newValue) => {\n                            // console.log(\"new value\", newValue)\n                            if (newValue) {\n                            setInvoiceNo(newValue);\n                            }\n                        }}\n                        id=\"combo-box\"\n                        options={invoiceOptions}\n                        getOptionLabel={(option) => option.value}\n                        style={{ width: 200 }}\n                        autoHighlight\n                        renderInput={(params) => (\n                            <TextField {...params} label=\"Invoice No.\" variant=\"outlined\" />\n                        )}\n                    /> */}\n                    \n                    {/* <TextField\n                        label=\"Invoice No.\"\n                        variant=\"outlined\"\n                        value={invoiceNo}\n                        style={{ marginLeft: 20 }}\n                        onChange={(e) => setInvoiceNo(e.target.value)}\n                    /> */}\n                    <TextField\n                        id=\"date\"\n                        label=\"Date\"\n                        type=\"date\"\n                        value={date}\n                        style={{ marginLeft: 20 }}          \n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        onChange={(event) => setDate(event.target.value)}          \n                    />\n                    <button  style={{backgroundColor: \"green\",\n                        border: \"none\",\n                        color: \"white\",\n                        padding: \"4px 8px\",\n                        textAlign: \"center\",\n                        textDecoration: \"none\",\n                        display: \"inline-block\",\n                        fontSize: \"14px\",\n                        align: \"left\",\n                        marginLeft: 20}}\n                        // onClick={setProductsInTable}\n                        onClick={getInvoices}\n                        >\n                            Fetch Invoice Data\n                    </button>\n                </Grid>\n            </Paper>\n        \n            {pushToInventory ? (\n            <UpdateInventory\n                newInventoryData={inventoryData}\n                header={header}\n                goBack={setPushToInventory}\n                invoice={invoice}\n            />\n            ) : ( openInvoice ? renderTableData() : renderInvoiceTable() \n            )}\n            <CModal show={showModal} onClose={() => toggleModal(\"notfounds\")}>\n        <CModalHeader closeButton>Add Red Products</CModalHeader>\n        <CModalBody>\n          <CContainer fluid>\n            <CRow>\n              <CCol sm=\"6\">\n                <CFormGroup>\n                  <CLabel htmlFor=\"invoiceNo\">Units In Case</CLabel>\n                  <CInput\n                    type=\"text\"\n                    name=\"unitsInCase\"\n                    value={unitsInCase}\n                    onChange={(event) => setUnitsInCase(event.target.value)}\n                    />\n                  <CLabel htmlFor=\"date\">Case Cost</CLabel>\n                  <CInput\n                    type=\"text\"\n                    name=\"price\"\n                    value={price}\n                    onChange={(event) => setPrice(event.target.value)}\n                    />\n                </CFormGroup>\n              </CCol>\n            </CRow>\n          </CContainer>\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"primary\" onClick={updateItem}>\n            ADD\n          </CButton>{\" \"}\n          <CButton color=\"secondary\" onClick={() => toggleModal(\"notfounds\")}>\n            Cancel\n          </CButton>\n        </CModalFooter>\n      </CModal>\n\n            <CModal show={detailsModal} onClose={() => toggleModal(\"details\")}>\n        <CModalHeader closeButton>Add Details</CModalHeader>\n        <CModalBody>\n          <CContainer fluid>\n            <CRow>\n              <CCol sm=\"6\">\n                <CFormGroup>\n                  <CLabel htmlFor=\"invoiceNo\">Add Details</CLabel>\n                  <TextareaAutosize\n                    aria-label=\"empty textarea\"\n                    placeholder=\"add details\"\n                    // minRows={4}\n                    // maxRows={10}\n                    style={{ width: 400, height: 100 }}\n                    onChange={(event) => setDetails(event.target.value)}\n                  />\n                </CFormGroup>\n              </CCol>\n            </CRow>\n          </CContainer>\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"primary\" onClick={saveDetails}>\n            ADD\n          </CButton>{\" \"}\n          <CButton color=\"secondary\" onClick={() => toggleModal(\"details\")}>\n            Cancel\n          </CButton>\n        </CModalFooter>\n      </CModal>\n\n\n\n        </div>\n\n    );\n}\n\nexport default SaveInvoiceData;"],"sourceRoot":""}